)]}'
{"version":3,"file":"/packages/channikhabra:stupid-models.js","sources":["channikhabra:stupid-models/lib/base_model.js","channikhabra:stupid-models/lib/model_factory.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,uB;AACA,qB;;AAEA,sC;AACA,uC;AACA,M;AACA,0B;AACA,6D;AACA,sC;AACA,M;AACA,+B;AACA,mC;AACA,2B;AACA,wB;AACA,oB;AACA,M;AACA,6B;AACA,2B;AACA,oB;AACA,M;AACA,4B;AACA,mD;AACA,wC;AACA,M;AACA,yC;AACA,oD;AACA,4C;AACA,M;AACA,wC;AACA,sD;AACA,gD;AACA,uB;;AAEA,wB;AACA,M;AACA,wC;AACA,uD;AACA,uB;;AAEA,wB;AACA,M;AACA,sC;AACA,mD;AACA,uB;;AAEA,wB;AACA,M;AACA,kC;AACA,oD;AACA,M;AACA,8B;AACA,qD;AACA,M;AACA,gC;AACA,sD;AACA,M;AACA,8B;AACA,mC;AACA,M;AACA,8B;AACA,yD;AACA,M;AACA,gD;AACA,wB;AACA,yD;AACA,sB;AACA,M;AACA,mD;AACA,6B;AACA,+B;AACA,2E;AACA,S;;AAEA,iD;;AAEA,2B;AACA,M;AACA,4C;AACA,kD;AACA,kH;AACA,oB;AACA,M;AACA,iC;AACA,2D;AACA,M;AACA,iC;AACA,6D;;AAEA,4B;AACA,M;;AAEA,2C;AACA,qD;;AAEA,mC;AACA,kE;AACA,M;;AAEA,gB;AACA,E;;;;;;;;;;;;;;;;;;;ACnGA,G;AACA,6D;AACA,G;AACA,8B;AACA,wC;AACA,8B;AACA,sC;AACA,8B;AACA,U;;AAEA,oB;AACA,M;AACA,kC;AACA,sC;AACA,M;;AAEA,2C;AACA,yC;AACA,mC;AACA,2B;AACA,M;;AAEA,kB;AACA,E","sourcesContent":["BaseModel = function(){\n    this.errors = {};\n\n    this.collection = function(name) {\n        throw Error(\"Not Implemented\");\n    };\n    this.db = function() {\n        if(this._local) return this.collection()._collection;\n        else return this.collection();\n    };\n    this.persist = function() {\n        this.db().remove(this._id);\n        delete this._local;\n        delete this._id;\n        this.save();\n    };\n    this.store = function() {\n        this._local = true;\n        this.save();\n    };\n    this.save = function() {\n        var attributes = this.getMongoAttributes();\n        return this._upsert(attributes);\n    };\n    this._upsert = function(attributes) {\n        if(this._id) return this.update(attributes);\n        else return this.insert(attributes);\n    };\n    this.insert = function(attributes) {\n        attributes = this.prepareDefaults(attributes);\n        this._id = this.db().insert(attributes);\n        this.refresh();\n\n        return this._id;\n    };\n    this.update = function(attributes) {\n        this.db().update(this._id, {$set: attributes});\n        this.refresh();\n\n        return this._id;\n    };\n    this.increment= function(attVal) {\n        this.db().update(this._id, {$inc: attVal});\n        this.refresh();\n\n        return this._id;\n    };\n    this.push = function(attVal) {\n        this.db().update(this._id, {$push: attVal});\n    };\n    this.pop = function(att) {\n        this.db().update(this._id, {$pop: {att: 1}});\n    };\n    this.shift = function(att) {\n        this.db().update(this._id, {$pop: {att: -1}});\n    };\n    this.remove = function() {\n        this.db().remove(this._id);\n    };\n    this.refresh = function(){\n        this.extend(this.collection().findOne(this._id));\n    };\n    this.prepareDefaults = function(attributes){\n        var object = {};\n        _.extend(object, this.defaultValues, attributes);\n        return object;\n    };\n    this.getMongoAttributes = function(includeId) {\n        var mongoValues = {};\n        for(var prop in this) {\n            if(this.isMongoAttribute(prop)) mongoValues[prop] = this[prop];\n        }\n\n        if(includeId) mongoValues._id = this._id;\n\n        return mongoValues;\n    };\n    this.isMongoAttribute = function(prop) {\n        if(_.isFunction(this[prop])) return false;\n        if(prop == '_id' || prop == 'errors' || prop == 'defaultValues' || prop == 'collectionName') return false;\n        return true;\n    };\n    this.time = function(field) {\n        return moment(this[field]).format(\"MM/DD - h:mma\");\n    };\n    this.extend = function(doc) {\n        doc = doc != undefined && _.isObject(doc) ? doc : {};\n\n        _.extend(this, doc);\n    };\n\n    this.delete = function(noAfterDelete) {\n        console.log('deleting', this.collectionName);\n\n        this.db().remove(this._id);\n        if(this.afterDelete && !noAfterDelete) this.afterDelete();\n    };\n\n    return this;\n};\n","/**\n * Model factory which should be used for creating new models\n */\nModel = function(collection) {\n    var model = function StupidModel() {\n        BaseModel.apply(this);\n        this.collection = function() {\n            return collection;\n        };\n\n        return this;\n    };\n    model.extend = function(obj) {\n        _.extend(this.prototype, obj);\n    };\n\n    collection._transform = function(doc) {\n        var stupidModel = new model(doc);\n        _.extend(stupidModel, doc);\n        return stupidModel;\n    };\n\n    return  model;\n};\n"]}